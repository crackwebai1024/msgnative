import { createReducer, createActions } from 'reduxsauce'
import Immutable from 'seamless-immutable'
import { UserTypes } from './UserRedux'

import { BASE_STATE_API_RESPONSE } from './_Base/State'
import { baseActionsReadApi, baseActionsWriteApi } from './_Base/Actions'
import { baseApiReadReducerInit, baseApiWriteReducerInit } from './_Base/Reducers'

export const REDUX_CONFIG = {
  statePrefix: 'template',
  reducerPrefix: 'TEMPLATE_',
  apiDataKey: 'templates',
  apiDataIndex: 'id'
}

/* ------------- Types and Action Creators ------------- */

const { Types, Creators } = createActions({
  ...baseActionsReadApi(REDUX_CONFIG.statePrefix),
  ...baseActionsWriteApi(REDUX_CONFIG.statePrefix),

  /* Contact specific  */
  setFilterIdentityId: ['id'],
  clearFilterIdentityId: null
})

export const TemplateTypes = Types
export default Creators

/* ------------- Initial State ------------- */

export const INITIAL_STATE = Immutable({
  ...BASE_STATE_API_RESPONSE,

  /* Contact specific */
  filterIdentityId: null
})

/* ------------- Reducers ------------- */

const reset = () => INITIAL_STATE

/* ------------- Hookup Reducers To Types ------------- */

const BASE_REDUCERS_READ_API = baseApiReadReducerInit(
    REDUX_CONFIG.reducerPrefix, Types,
    REDUX_CONFIG.apiDataKey, REDUX_CONFIG.apiDataIndex
)
const BASE_REDUCERS_WRITE_API = baseApiWriteReducerInit(
    REDUX_CONFIG.reducerPrefix, Types
)

export const reducer = createReducer(INITIAL_STATE, {
  ...BASE_REDUCERS_READ_API,
  ...BASE_REDUCERS_WRITE_API,

  [UserTypes.LOGOUT]: reset
})

/* ------------- Selectors ------------- */
