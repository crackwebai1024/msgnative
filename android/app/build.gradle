apply plugin: "com.android.application"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */
project.ext.react = [

    // whether to bundle JS and assets in debug mode
    bundleInDebug: false,
    // whether to bundle JS and assets in release mode
    bundleInRelease: true,
    // the entry file for bundle generation
    entryFile: "index.android.js",
    // the root of your RN project, i.e. where "package.json" lives
    root: "../../",
    devDisabledInDebug: false,
    devDisabledInRelease: true,
    // bundleCommand: "unbundle",
    // bundleConfig: "packager/config.js",
    // extraPackagerArgs: ["--indexed-unbundle"],
    inputExcludes: ["ios/**", "__tests__/**", "bundle_out/**"],
    extraPackagerArgs: ['--sourcemap-output', file("$buildDir/outputs/index.android.js.map")]
]
apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"
/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = true

configurations.all {
    resolutionStrategy {
        preferProjectModules()
//        dependencySubstitution {
//            substitute module('com.facebook.react.modules.network') with project(':com.facebook.react.modules.network')
//        }
    }
}

android {
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dexOptions {
        preDexLibraries false
        javaMaxHeapSize "8g"
    }
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "io.msgsafe.android"
        minSdkVersion rootProject.ext.minSdkVersion
        multiDexEnabled true
        versionCode 1
        versionName "1.0"
        if (project.hasProperty('versionCode')) {
            versionCode = Integer.parseInt(project.versionCode)
        } else {
            versionCode = 1
        }
        if (project.hasProperty('versionName')) {
            versionName = project.versionName
        } else {
            versionName = "1.0.1"
        }
        if (project.hasProperty('versionName')) {
                versionName = project.versionName
        } else {
	            versionName = "1.0.1"
        }

        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
//
//        packagingOptions {
//            exclude "lib/arm64-v8a/libgnustl_shared.so"
//            doNotStrip '*/mips/*.so'
//            doNotStrip '*/mips64/*.so'
//        }

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        renderscriptTargetApi 26
        renderscriptSupportModeEnabled true
    }

    signingConfigs {
        release {
            if (project.hasProperty('MYAPP_RELEASE_STORE_FILE')) {
                storeFile file(MYAPP_RELEASE_STORE_FILE)
                storePassword MYAPP_RELEASE_STORE_PASSWORD
                keyAlias MYAPP_RELEASE_KEY_ALIAS
                keyPassword MYAPP_RELEASE_KEY_PASSWORD
            }
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include 'x86', 'armeabi-v7a'
            // include 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a": 1, "x86": 2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    compile project(':react-native-webview')
    implementation project(':react-native-background-timer')
    implementation project(':react-native-share-extension')
    implementation project(':react-native-sqlite-storage')
    implementation project(':react-native-blur')
    implementation project(':rnkit-actionsheet-picker')
    implementation project(':react-native-fast-image')
    implementation project(':react-native-document-picker')
    implementation(project(':react-native-fcm')) {
        exclude group: 'com.google.android.gms'
        exclude group: 'com.google.firebase'
    }
    implementation project(':react-native-open-settings')
    implementation(project(':react-native-maps')) {
        exclude group: 'com.google.android.gms'
    }
    implementation project(':react-native-fs')
    implementation project(':react-native-image-picker')
    implementation project(':WebRTCModule')
    implementation project(':react-native-vector-icons')
    implementation project(':react-native-sound')
    implementation project(':react-native-sodium')
    implementation project(':react-native-linear-gradient')
    implementation project(':react-native-keychain')
    implementation project(':react-native-keep-awake')
    implementation(project(':react-native-device-info')) {
        exclude group: 'com.google.android.gms'
    }
    implementation project(':react-native-contacts')
    implementation project(':react-native-config')
    implementation project(':bugsnag-react-native')
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
    implementation "com.android.support:support-v4:${rootProject.ext.supportLibVersion}"
    implementation ("com.facebook.react:react-native:+") {
        exclude group: 'com.facebook.react:react-native', module: 'modules.network'
    }  // From node_modules
    implementation project(':BackgroundToForegroundService')
    implementation project(':react-native-share')
    implementation project(':react-native-get-real-path')
    implementation project(":react-native-shared-preferences")

    implementation('com.google.firebase:firebase-core:16.0.1') { //this decides your firebase SDK version
        force = true
    }
    implementation("com.google.android.gms:play-services-basement:${rootProject.ext.playServicesVersion}") {
        force = true
    }
    implementation("com.google.android.gms:play-services-base:${rootProject.ext.playServicesVersion}") {
        force = true
    }
    implementation("com.google.android.gms:play-services-maps:${rootProject.ext.playServicesVersion}") {
        force = true
    }
    implementation('com.google.firebase:firebase-messaging:17.3.0') {
        force = true
    }
    implementation ("com.datatheorem.android.trustkit:trustkit:1.0.2")
    implementation 'com.squareup.okhttp3:okhttp'
    implementation project(':netperf-lib')

    implementation 'com.android.support:multidex:1.0.3'
    implementation 'de.hdodenhof:circleimageview:2.2.0'
    implementation 'com.squareup.picasso:picasso:2.71828'
    implementation 'jp.wasabeef:blurry:2.1.1'

    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2',
    {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation 'junit:junit:4.12'
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.bugsnag.android.gradle'

bugsnag {
  retryCount 6
}
/**
  ndk true
  sharedObjectPath "app/build/intermediates/jniLibs"
**/
